{"version":3,"sources":["App.module.css","api.ts","chat-reducer.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","api","socket","createConnection","this","io","subscribe","initMessagesHandler","newMessagesSentHandler","userTypingHandler","on","destroyConnection","disconnect","sendName","name","emit","sendMessage","message","error","alert","typeMessage","clientDeleteAllMessages","initialState","messages","typingUsers","App","useSelector","state","chat","dispatch","useDispatch","useEffect","fn","type","messagesReceived","newMessageReceived","user","addTypingUser","useState","setMessage","setName","isAutoScrollActive","setIsAutoScrollActive","lastScrollTop","setLastScrollTop","messagesAnchorRef","current","scrollIntoView","behavior","useRef","className","styles","nameBlock","input","onChange","e","currentTarget","value","button1","onClick","setClientName","chatBlock","onScroll","element","maxScrollPosition","scrollHeight","clientHeight","scrollTop","Math","abs","map","m","id","ref","enterMessageBlock","elem","onKeyPress","button2","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","filter","u","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.593856f7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__3-2D1\",\"nameBlock\":\"App_nameBlock__1bFcO\",\"input\":\"App_input__3l-k3\",\"button1\":\"App_button1__22zoa\",\"chatBlock\":\"App_chatBlock__z8gJl\",\"messages\":\"App_messages__25IV6\",\"message\":\"App_message__1A7lT\",\"enterMessageBlock\":\"App_enterMessageBlock__1Wafl\",\"elem\":\"App_elem__14lQ_\",\"button2\":\"App_button2__3DljB\"};","import io from \"socket.io-client\";\r\n\r\nexport const api = {\r\n    socket: null as null | SocketIOClient.Socket,\r\n    createConnection() {\r\n        // this.socket = io(\"http://localhost:3009\")\r\n        this.socket = io(\"https://konstantin-websocket-chat-back.herokuapp.com\")\r\n    },\r\n    subscribe(initMessagesHandler: (messages: any, fn: () => void) => void,\r\n              newMessagesSentHandler: (message: any) => void,\r\n              userTypingHandler: (user: any) => void) {\r\n        this.socket?.on('init-messages-published', initMessagesHandler)\r\n        this.socket?.on('new-message-sent', newMessagesSentHandler)\r\n        this.socket?.on('user-is-typing', userTypingHandler)\r\n    },\r\n    destroyConnection() {\r\n        this.socket?.disconnect()\r\n        this.socket = null\r\n    },\r\n    sendName(name: string) {\r\n        this.socket?.emit('client-name-sent', name)\r\n    },\r\n    sendMessage(message: string){\r\n        this.socket?.emit('client-message-sent', message, (error: string | null) => {\r\n            if(error) alert(error)\r\n        })\r\n    },\r\n    typeMessage() {\r\n        this.socket?.emit('client-typed')\r\n    },\r\n    clientDeleteAllMessages() {\r\n        this.socket?.emit('client-deleted-all-messages')\r\n    }\r\n}","import {api} from \"./api\";\r\n\r\nconst initialState = {\r\n    messages: [],\r\n    typingUsers: []\r\n}\r\n\r\nexport const chatReducer = (state: any = initialState, action: any) => {\r\n    switch (action.type) {\r\n        case \"messages-received\": {\r\n            return {...state, messages: action.messages}\r\n        }\r\n        case \"new-message-received\": {\r\n            return {...state,\r\n                messages: [...state.messages, action.message],\r\n                typingUsers: state.typingUsers.filter((u: any) => u.id !== action.message.user.id)\r\n            }\r\n        }\r\n        case \"add-typing-user\": {\r\n            return {...state, typingUsers: [...state.typingUsers\r\n                    .filter((u: any) => u.id !== action.user.id), action.user]}\r\n        }\r\n        case \"delete-all-messages\": {\r\n            return {...state, messages: []}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst messagesReceived = (messages: any) => ({type: \"messages-received\", messages})\r\nconst newMessageReceived = (message: any) => ({type: \"new-message-received\", message})\r\nconst addTypingUser = (user: any) => ({type: \"add-typing-user\", user})\r\nconst deleteAllMessages = () => ({type: \"delete-all-messages\"})\r\n\r\nexport const createConnection = () => (dispatch: any) => {\r\n    api.createConnection()\r\n    api.subscribe((messages: any, fn: (data: string) => void) => {\r\n        dispatch(messagesReceived(messages))\r\n        fn(\"data from front\")\r\n        },\r\n        (message: any) => {\r\n        dispatch(newMessageReceived(message))\r\n        },\r\n        (user: any) => {\r\n        dispatch(addTypingUser(user))\r\n        })\r\n}\r\n\r\nexport const setClientName = (name: string) => (dispatch: any) => {\r\n    api.sendName(name)\r\n}\r\n\r\nexport const sendMessage = (message: string) => (dispatch: any) => {\r\n    api.sendMessage(message)\r\n}\r\n\r\nexport const typeMessage = () => (dispatch: any) => {\r\n    api.typeMessage()\r\n}\r\n\r\nexport const destroyConnection = () => (dispatch: any) => {\r\n    api.destroyConnection()\r\n}\r\n\r\nexport const clientDeleteAllMessages = () => (dispatch: any) => {\r\n    api.clientDeleteAllMessages()\r\n    dispatch(deleteAllMessages())\r\n}","import React, {useEffect, useRef, useState} from 'react';\nimport styles from './App.module.css';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    clientDeleteAllMessages,\n    createConnection,\n    destroyConnection,\n    sendMessage,\n    setClientName,\n    typeMessage\n} from \"./chat-reducer\";\nimport {AppStateType} from \"./index\";\n\nconst App: React.FC = () => {\n    const messages = useSelector((state: AppStateType) => state.chat.messages)\n    const typingUsers = useSelector((state: AppStateType) => state.chat.typingUsers)\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(createConnection())\n        return () => {\n            dispatch(destroyConnection())\n        }\n    }, [])\n\n    const [message, setMessage] = useState(\"\")\n    const [name, setName] = useState(\"\")\n    const [isAutoScrollActive, setIsAutoScrollActive] = useState(true)\n    const [lastScrollTop, setLastScrollTop] = useState(0)\n\n    useEffect(() => {\n        if (isAutoScrollActive) {\n            messagesAnchorRef.current?.scrollIntoView({behavior: \"smooth\"})\n        }\n    }, [messages])\n\n    const messagesAnchorRef = useRef<HTMLDivElement>(null)\n\n    return (\n        <div className={styles.App}>\n            <div className={styles.nameBlock}>\n                Please, enter your nickname:\n                <input\n                    className={styles.input}\n                    onChange={(e) => setName(e.currentTarget.value)}\n                />\n                <button\n                    className={styles.button1}\n                    onClick={() => {\n                        dispatch(setClientName(name))\n                    }}\n                >Enter\n                </button>\n            </div>\n            <div className={styles.chatBlock}>\n                <div\n                    className={styles.messages}\n                    onScroll={(e) => {\n                        let element = e.currentTarget\n                        let maxScrollPosition = element.scrollHeight - element.clientHeight\n\n                        if (element.scrollTop > lastScrollTop && Math.abs(maxScrollPosition - element.scrollTop) < 5) {\n                            setIsAutoScrollActive(true)\n                        } else {\n                            setIsAutoScrollActive(false)\n                        }\n                        setLastScrollTop(e.currentTarget.scrollTop)\n                    }}\n                >\n                    {messages.map((m: any) => {\n                        return <div key={m.id} className={styles.message}>\n                            <b>{m.user.name}:</b> {m.message}\n                        </div>\n                    })}\n                    {typingUsers.map((m: any) => {\n                        return <div key={m.id}>\n                            <b>{m.name}</b> is typing...\n                        </div>\n                    })}\n                    <div ref={messagesAnchorRef}/>\n                </div>\n                <div className={styles.enterMessageBlock}>\n                    <textarea\n                        className={styles.elem}\n                        value={message}\n                        onKeyPress={() => {\n                            dispatch(typeMessage())\n                        }}\n                        onChange={(e) => setMessage(e.currentTarget.value)}\n                    />\n                    <button\n                        className={styles.button2}\n                        onClick={() => {\n                            dispatch(sendMessage(message))\n                            setMessage(\"\")\n                        }}>\n                        Send\n                    </button>\n                    <button\n                        className={styles.button2}\n                        onClick={() => {\n                            dispatch(clientDeleteAllMessages())\n                        }}>\n                        Delete all messages\n                    </button>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport {chatReducer} from \"./chat-reducer\";\nimport thunk from \"redux-thunk\";\nimport {Provider} from \"react-redux\";\n\nlet rootReducer = combineReducers({chat: chatReducer})\nexport type AppStateType = ReturnType<typeof rootReducer>\nconst store = createStore(rootReducer,\n    applyMiddleware(thunk))\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\nreportWebVitals()\n"],"sourceRoot":""}